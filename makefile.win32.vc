#
# Makefile for Regina REXX Interpreter
#
# Using MS Visual C++ under Win32
# Usage:
#    nmake -f [DEBUG=Y] [TRACEMEM=Y]] [FLISTS=N] [SOCKET=nnnn]
#
# generated files without giving a target on the command line:
# rexx.exe     statically bounded REXX interpreter
# rexx.lib     static link library of the REXX interpreter, place anywhere
#              in a directory of your LIB-variable.
# regina.lib   link file for regina.dll, place anywhere in a directory of
#              your LIB-variable.
# regina.dll   dynamic link library of the REXX interpreter, place anywhere
#              in a directory of your PATH.
# regina.exe   dynamically bound REXX interpreter
#
# rxstack.exe  daemon process that provides external queues
#
# rxqueue.exe  program to access external queues
#
SRCDIR=$(REGINA_SRCDIR)
#
#                      USER CONFIGURABLE VARIABLES
#
# Please specify the current directory of the sources:
#
#SRCDIR=path_to_this_file
#

VER=33
VERDOT=3.3

CC = cl

!if "$(DEBUG)" == "Y"
EEXTRA = /DEBUG /PDB:NONE
DEBUGFLAG  = /Z7 /Od /J #/DREGINA_DEBUG_MEMORY /DREGINA_DEBUG_MEMORY1 /DREGINA_DEBUG_MEMORY2 /DREGINA_DEBUG_MEMORY3
OPTIMIZE =
! if "$(TRACEMEM)" == "Y"
MEMTRACE = /DTRACEMEM
! else
MEMTRACE =
! endif
!else
EEXTRA = /release
DEBUGFLAG  = /DNDEBUG
OPTIMIZE = /Ox /J #-O2gityb1 -J
!endif

!if "$(FLISTS)" == "N"
NOFLISTS = /DNOFLISTS
!else
NOFLISTS =
!endif

#
# GCI is default
#
!if "$(GCI)" == "N"
GCI_SHO = 
HAVE_GCI =
!else
GCI_SHO = gci_call.ts.obj gci_convert.ts.obj gci_execute.ts.obj gci_helper.ts.obj gci_prepare.ts.obj gci_reginabridge.ts.obj gci_rxfuncdefine.ts.obj gci_tree.ts.obj
HAVE_GCI = -DHAVE_GCI -I$(SRCDIR)\gci -I.
!endif

THREADING = /MT

DYN_COMP = /LD /DDYNAMIC
TSDYN_COMP = /LD /DDYNAMIC

!ifdef "$(SOCKET)"
REXXSOCKET="-DRXSOCKET=$(SOCKET)"
!endif

LIBS = advapi32.lib user32.lib #libc.lib
WINSOCK = wsock32.lib
SERVICELIBS = libcmt.lib kernel32.lib advapi32.lib shell32.lib
SHL_TARGETS= regina.exe test1.dll test2.dll
LD     = link
LIBFLAGS = /OUT:rexx.lib
LIBLINK = regina.lib
LINKSHL = regina.lib
LD_RXLIBPRE=link /NOLOGO /DLL /OUT:$@
LD_RXLIB1= /DEF:$(SRCDIR)\test1_w32_dll.def
LD_RXLIB2= /DEF:$(SRCDIR)\test2_w32_dll.def
MV= -ren
#
CEXTRA = /DWIN32 /nologo /W4 $(REXXSOCKET) $(HAVE_GCI) # -Zp1

CC2O=-Fo$@
#
# Include the common rules for the interpreter
#

#
# Some settings that you may wish to change, these are used only
# for the 'install' target:
#
#   TOPDIR    The top of the directory hierarchy in which to install
#   BINDIR    Where to install the compiled 'rexx' program
#   LIBDIR    Where to install the 'regina' library
#   MANEXT    The extention of the manual page
#   MANDIR    Where to install the manual page
#   PROGNAME  What to call the compiled program
#
BINDIR = $(TOPDIR)/bin
LIBDIR = $(TOPDIR)/lib

COPT = $(OPTIMIZE) $(DEBUGFLAG) $(CEXTRA) -I$(SRCDIR) $(MEMTRACE) $(NOFLISTS) /ML
TSCOPT = $(OPTIMIZE) $(DEBUGFLAG) $(CEXTRA) -I$(SRCDIR) $(MEMTRACE) $(NOFLISTS) $(THREADING)
LINKOPT = $(EEXTRA) /NOLOGO /VERSION:$(VERDOT)
OTHERCOPT = $(OPTIMIZE) $(DEBUGFLAG) $(CEXTRA) -I$(SRCDIR) $(MEMTRACE) $(NOFLISTS) /ML
OTHERTSCOPT = $(OPTIMIZE) $(DEBUGFLAG) $(CEXTRA) -I$(SRCDIR) $(MEMTRACE) $(NOFLISTS) $(THREADING)

README = $(SRCDIR)/README.??? $(SRCDIR)/COPYING-LIB $(SRCDIR)/BUGS $(SRCDIR)/yaccsrc.bound

CSRCFILES = $(SRCDIR)/funcs.c $(SRCDIR)/builtin.c $(SRCDIR)/error.c $(SRCDIR)/variable.c \
        $(SRCDIR)/interprt.c $(SRCDIR)/debug.c $(SRCDIR)/dbgfuncs.c $(SRCDIR)/memory.c $(SRCDIR)/parsing.c $(SRCDIR)/files.c \
        $(SRCDIR)/misc.c $(SRCDIR)/unxfuncs.c $(SRCDIR)/arxfuncs.c $(SRCDIR)/cmsfuncs.c $(SRCDIR)/os2funcs.c $(SRCDIR)/shell.c $(SRCDIR)/rexxext.c $(SRCDIR)/stack.c \
        $(SRCDIR)/tracing.c $(SRCDIR)/interp.c $(SRCDIR)/cmath.c $(SRCDIR)/convert.c $(SRCDIR)/strings.c $(SRCDIR)/library.c \
        $(SRCDIR)/strmath.c $(SRCDIR)/signals.c $(SRCDIR)/macros.c $(SRCDIR)/envir.c $(SRCDIR)/expr.c $(SRCDIR)/rexxbif.c \
        $(SRCDIR)/wrappers.c $(SRCDIR)/options.c $(SRCDIR)/doscmd.c $(SRCDIR)/extstack.c \
        $(SRCDIR)/mt_notmt.c $(SRCDIR)/mt_win32.c $(SRCDIR)/mt_posix.c $(SRCDIR)/nosaa.c \
        $(SRCDIR)/ntservice/service.c

OFILES = funcs.obj builtin.obj error.obj variable.obj \
        interprt.obj debug.obj dbgfuncs.obj memory.obj parsing.obj files.obj \
        misc.obj unxfuncs.obj arxfuncs.obj cmsfuncs.obj os2funcs.obj shell.obj rexxext.obj stack.obj extstack.obj \
        tracing.obj interp.obj cmath.obj convert.obj strings.obj library.obj \
        strmath.obj signals.obj macros.obj envir.obj expr.obj instore.obj rexxbif.obj \
        yaccsrc.obj lexsrc.obj options.obj doscmd.obj wrappers.obj mt_notmt.obj #r2perl.obj

TSFILES = funcs.ts.obj builtin.ts.obj error.ts.obj variable.ts.obj extstack.ts.obj rexxbif.ts.obj \
        interprt.ts.obj debug.ts.obj dbgfuncs.ts.obj memory.ts.obj parsing.ts.obj files.ts.obj \
        misc.ts.obj unxfuncs.ts.obj arxfuncs.ts.obj cmsfuncs.ts.obj os2funcs.ts.obj shell.ts.obj rexxext.ts.obj stack.ts.obj \
        tracing.ts.obj interp.ts.obj cmath.ts.obj convert.ts.obj strings.ts.obj library.ts.obj \
        strmath.ts.obj signals.ts.obj macros.ts.obj envir.ts.obj expr.ts.obj instore.ts.obj \
        yaccsrc.ts.obj lexsrc.ts.obj wrappers.ts.obj options.ts.obj doscmd.ts.obj \
        rexx.ts.obj client.ts.obj rexxsaa.ts.obj mt_win32.ts.obj $(GCI_SHO)

DEMODIR = $(SRCDIR)/demo
DEMOFILES = $(DEMODIR)/*
TRIPDIR = $(SRCDIR)/trip
TRIPFILES = $(TRIPDIR)/*
UNIXFILES = $(SRCDIR)/*.in $(SRCDIR)/configure $(SRCDIR)/config.sub \
        $(SRCDIR)/config.guess $(SRCDIR)/aclocal.m4 $(SRCDIR)/install-sh \
        $(SRCDIR)/INSTALL $(SRCDIR)/yaccsrc.y $(SRCDIR)/lexsrc.l

ALLSRC = $(CFILES) $(HFILES)

HFILES = $(SRCDIR)/rexx.h $(SRCDIR)/defs.h $(SRCDIR)/extern.h $(SRCDIR)/regina_t.h \
                $(SRCDIR)/config.h $(SRCDIR)/strings.h $(SRCDIR)/configur.h $(SRCDIR)/yaccsrc.h \
                $(SRCDIR)/rxiface.h $(SRCDIR)/rexxsaa.h $(SRCDIR)/utsname.h \
                $(SRCDIR)/mt.h $(SRCDIR)/mt_notmt.h $(SRCDIR)/mt_win32.h $(SRCDIR)/mt_posix.h \
                $(SRCDIR)/ntservice/service.h
CFILES = $(SRCDIR)/yaccsrc.c $(SRCDIR)/lexsrc.c $(CSRCFILES) $(SRCDIR)/execiser.c \
                $(SRCDIR)/rexxsaa.c $(SRCDIR)/rexx.c $(SRCDIR)/regina.c $(SRCDIR)/client.c \
                $(SRCDIR)/r2perl.c $(SRCDIR)/test1.c $(SRCDIR)/test2.c

MTSSRC = $(SRCDIR)/en.mts $(SRCDIR)/pt.mts $(SRCDIR)/no.mts \
	$(SRCDIR)/de.mts $(SRCDIR)/es.mts $(SRCDIR)/pl.mts

GCIHEADERS = $(SRCDIR)\gci\gci.h $(SRCDIR)\gci\embedded.h

#.SUFFIXES: .sho $(SUFFIXES)
#
# Do not use default suffixes rule
#
.SUFFIXES:

all : rexx.exe rexx.lib execiser.exe $(SHL_TARGETS) rxstack.exe rxqueue.exe threader.exe mtb_files

$(CSRCFILES) : $(SRCDIR)/rexx.h

$(SRCDIR)/rexx.h : $(SRCDIR)/extern.h $(SRCDIR)/strings.h $(SRCDIR)/defs.h $(SRCDIR)/regina_t.h $(SRCDIR)/mt.h


rexx.exe : $(OFILES) rexx.obj rexxw32exe.obj nosaa.obj
         $(LD) $(LINKOPT) $(STATIC_LDFLAGS) /OUT:rexx.exe $(OFILES) rexx.obj rexxw32exe.obj nosaa.obj $(LIBS) $(WINSOCK)

regina.exe : regina.dll regina.obj reginaw32exe.obj
         $(LD) $(LINKOPT) $(DYNAMIC_LDFLAGS) /OUT:regina.exe regina.obj reginaw32exe.obj $(LIBS) $(LIBLINK) $(WINSOCK)

execiser.exe : execiser.obj regina.dll
         $(LD) $(LINKOPT) /OUT:execiser.exe execiser.obj $(LIBLINK)

rxqueue.exe : rxqueue.obj erexxbif.obj eextstack.obj rxqueuew32exe.obj
         $(LD) $(LINKOPT) /OUT:rxqueue.exe rxqueue.obj erexxbif.obj eextstack.obj rxqueuew32exe.obj $(WINSOCK)

rxstack.exe : rxstack.obj erexxbif_mt.obj eextstack_mt.obj service.obj rxstackw32exe.obj
         $(LD) $(LINKOPT) /OUT:rxstack.exe rxstack.obj erexxbif_mt.obj eextstack_mt.obj service.obj rxstackw32exe.obj $(WINSOCK) $(SERVICELIBS)

threader.exe : threader.obj regina.dll
         $(LD) $(LINKOPT) /OUT:threader.exe threader.obj $(LIBLINK)

rexx.lib: $(OFILES) client.obj drexx.obj rexxsaa.obj
        lib $(LIBFLAGS) $(OFILES) client.obj drexx.obj rexxsaa.obj

regina.dll: $(TSFILES) reginaw32dll.obj
        link $(LINKOPT) /DLL /BASE:0x6B000000 /OUT:regina.dll /MAP:regina_dd.map /IMPLIB:regina.lib /DEF:$(SRCDIR)\regina_w32_dll.def reginaw32dll.obj *.ts.obj $(LIBS) $(WINSOCK)

#
# Convert .mts to .mtb
#
mtb_files: msgcmp.exe $(MTSSRC)
        msgcmp $(MTSSRC)

msgcmp.exe: msgcmp.obj
        link $(LINKOPT) /OUT:msgcmp.exe msgcmp.obj

msgcmp.obj: $(SRCDIR)/msgcmp.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/msgcmp.c

#
# Rules for static objects
#
funcs.obj :   $(SRCDIR)/funcs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/funcs.c

builtin.obj : $(SRCDIR)/builtin.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/builtin.c

error.obj :   $(SRCDIR)/error.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/error.c

variable.obj :$(SRCDIR)/variable.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/variable.c

interprt.obj :$(SRCDIR)/interprt.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/interprt.c

debug.obj :   $(SRCDIR)/debug.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/debug.c

dbgfuncs.obj :$(SRCDIR)/dbgfuncs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/dbgfuncs.c

memory.obj :  $(SRCDIR)/memory.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/memory.c

parsing.obj : $(SRCDIR)/parsing.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/parsing.c

files.obj :   $(SRCDIR)/files.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/files.c

misc.obj :    $(SRCDIR)/misc.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/misc.c

unxfuncs.obj :$(SRCDIR)/unxfuncs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/unxfuncs.c

arxfuncs.obj :$(SRCDIR)/arxfuncs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/arxfuncs.c

os2funcs.obj :$(SRCDIR)/os2funcs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/os2funcs.c

cmsfuncs.obj :$(SRCDIR)/cmsfuncs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/cmsfuncs.c

shell.obj :   $(SRCDIR)/shell.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/shell.c

rexxext.obj : $(SRCDIR)/rexxext.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/rexxext.c

stack.obj :   $(SRCDIR)/stack.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/stack.c

tracing.obj : $(SRCDIR)/tracing.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/tracing.c

interp.obj :  $(SRCDIR)/interp.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/interp.c

cmath.obj :   $(SRCDIR)/cmath.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/cmath.c

convert.obj : $(SRCDIR)/convert.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/convert.c

strings.obj : $(SRCDIR)/strings.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/strings.c

library.obj : $(SRCDIR)/library.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/library.c

strmath.obj : $(SRCDIR)/strmath.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/strmath.c

signals.obj : $(SRCDIR)/signals.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/signals.c

macros.obj :  $(SRCDIR)/macros.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/macros.c

envir.obj :   $(SRCDIR)/envir.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/envir.c

expr.obj :    $(SRCDIR)/expr.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/expr.c

wrappers.obj :$(SRCDIR)/wrappers.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/wrappers.c

options.obj : $(SRCDIR)/options.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/options.c

doscmd.obj :  $(SRCDIR)/doscmd.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/doscmd.c

rexx.obj :    $(SRCDIR)/rexx.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/rexx.c

client.obj :    $(SRCDIR)/client.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/client.c

rexxsaa.obj :    $(SRCDIR)/rexxsaa.c   $(SRCDIR)\rexxsaa.h
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/rexxsaa.c

regina.obj :  $(SRCDIR)/regina.c
        $(CC) $(TSCOPT) $(CC2O) -c $(SRCDIR)/regina.c

drexx.obj : $(SRCDIR)/rexx.c
        $(CC) $(COPT) -c -DRXLIB $(CC2O) $(SRCDIR)/rexx.c

mt_notmt.obj : $(SRCDIR)/mt_notmt.c
        $(CC) $(COPT) -c $(CC2O) $(SRCDIR)/mt_notmt.c

mt_win32.obj : $(SRCDIR)/mt_win32.c
        $(CC) $(COPT) -c $(CC2O) $(SRCDIR)/mt_win32.c

nosaa.obj : $(SRCDIR)/nosaa.c
        $(CC) $(COPT) -c $(CC2O) $(SRCDIR)/nosaa.c

instore.obj : $(SRCDIR)/instore.c
        $(CC) $(COPT) -c $(CC2O) $(SRCDIR)/instore.c

lexsrc.obj : $(SRCDIR)/lexsrc.c $(SRCDIR)/rexx.h $(SRCDIR)/yaccsrc.h
        $(CC) $(OTHERCOPT) $(CC2O) -c $(SRCDIR)/lexsrc.c

yaccsrc.obj : $(SRCDIR)/yaccsrc.c $(SRCDIR)/defs.h $(SRCDIR)/rexx.h
        $(CC) $(OTHERCOPT) $(CC2O) -c -DYYMAXDEPTH=10000 $(SRCDIR)/yaccsrc.c

extstack.obj : $(SRCDIR)/extstack.c $(SRCDIR)/rexx.h
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/extstack.c

execiser.obj : $(SRCDIR)/execiser.c $(SRCDIR)/rexx.h
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/execiser.c

rxqueue.obj : $(SRCDIR)/rxqueue.c $(SRCDIR)/rexx.h
        $(CC) -DEXTERNAL_TO_REGINA $(COPT) $(CC2O) -c $(SRCDIR)/rxqueue.c

rxstack.obj : $(SRCDIR)/rxstack.c $(SRCDIR)/rexx.h $(SRCDIR)/ntservice/service.h
        $(CC) -DEXTERNAL_TO_REGINA -DBUILD_NT_SERVICE -I$(SRCDIR)/ntservice $(TSCOPT) $(CC2O) -c $(SRCDIR)/rxstack.c

service.obj : $(SRCDIR)/ntservice/service.c $(SRCDIR)/ntservice/service.h
        $(CC) -I$(SRCDIR)/ntservice $(TSCOPT) $(CC2O) -c $(SRCDIR)/ntservice/service.c

rexxbif.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexxbif.h
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/rexxbif.c

rexxbif_mt.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexxbif.h
        $(CC) $(TSCOPT) $(CC2O) -c $(SRCDIR)/rexxbif.c

erexxbif.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexxbif.h
        $(CC) -DEXTERNAL_TO_REGINA $(COPT) $(CC2O) -c $(SRCDIR)/rexxbif.c

erexxbif_mt.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexxbif.h
        $(CC) -DEXTERNAL_TO_REGINA $(TSCOPT) $(CC2O) -c $(SRCDIR)/rexxbif.c

eextstack.obj : $(SRCDIR)/extstack.c $(SRCDIR)/rexx.h
        $(CC) -DEXTERNAL_TO_REGINA $(COPT) $(CC2O) -c $(SRCDIR)/extstack.c

eextstack_mt.obj : $(SRCDIR)/extstack.c $(SRCDIR)/rexx.h
        $(CC) -DEXTERNAL_TO_REGINA $(TSCOPT) $(CC2O) -c $(SRCDIR)/extstack.c

#
# Rules for thread-safe shared objects
#
threader.obj : $(SRCDIR)/threader.c $(SRCDIR)/rexxsaa.h
        $(CC) $(TSCOPT) $(CC2O) -DWIN32_THREADS -c $(SRCDIR)/threader.c

funcs.ts.obj :   $(SRCDIR)/funcs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/funcs.c

builtin.ts.obj : $(SRCDIR)/builtin.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/builtin.c

error.ts.obj :   $(SRCDIR)/error.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/error.c

variable.ts.obj :$(SRCDIR)/variable.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/variable.c

interprt.ts.obj :$(SRCDIR)/interprt.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/interprt.c

debug.ts.obj :   $(SRCDIR)/debug.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/debug.c

dbgfuncs.ts.obj :$(SRCDIR)/dbgfuncs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/dbgfuncs.c

memory.ts.obj :  $(SRCDIR)/memory.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/memory.c

parsing.ts.obj : $(SRCDIR)/parsing.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/parsing.c

files.ts.obj :   $(SRCDIR)/files.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/files.c

misc.ts.obj :    $(SRCDIR)/misc.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/misc.c

unxfuncs.ts.obj :$(SRCDIR)/unxfuncs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/unxfuncs.c

arxfuncs.ts.obj :$(SRCDIR)/arxfuncs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/arxfuncs.c

os2funcs.ts.obj :$(SRCDIR)/os2funcs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/os2funcs.c

cmsfuncs.ts.obj :$(SRCDIR)/cmsfuncs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/cmsfuncs.c

shell.ts.obj :   $(SRCDIR)/shell.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/shell.c

rexxext.ts.obj : $(SRCDIR)/rexxext.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/rexxext.c

stack.ts.obj :   $(SRCDIR)/stack.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/stack.c

tracing.ts.obj : $(SRCDIR)/tracing.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/tracing.c

interp.ts.obj :  $(SRCDIR)/interp.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/interp.c

cmath.ts.obj :   $(SRCDIR)/cmath.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/cmath.c

convert.ts.obj : $(SRCDIR)/convert.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/convert.c

strings.ts.obj : $(SRCDIR)/strings.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/strings.c

library.ts.obj : $(SRCDIR)/library.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/library.c

strmath.ts.obj : $(SRCDIR)/strmath.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/strmath.c

signals.ts.obj : $(SRCDIR)/signals.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/signals.c

macros.ts.obj :  $(SRCDIR)/macros.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/macros.c

envir.ts.obj :   $(SRCDIR)/envir.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/envir.c

expr.ts.obj :    $(SRCDIR)/expr.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/expr.c

wrappers.ts.obj :$(SRCDIR)/wrappers.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/wrappers.c

options.ts.obj : $(SRCDIR)/options.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/options.c

doscmd.ts.obj :  $(SRCDIR)/doscmd.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/doscmd.c

client.ts.obj :  $(SRCDIR)/client.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/client.c

rexxsaa.ts.obj :  $(SRCDIR)/rexxsaa.c  $(SRCDIR)\rexxsaa.h
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/rexxsaa.c

rexx.ts.obj : $(SRCDIR)/rexx.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c -DRXLIB $(SRCDIR)/rexx.c

instore.ts.obj :  $(SRCDIR)/instore.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/instore.c

mt_win32.ts.obj :$(SRCDIR)/mt_win32.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/mt_win32.c

lexsrc.ts.obj : $(SRCDIR)/lexsrc.c $(SRCDIR)/rexx.h $(SRCDIR)/yaccsrc.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/lexsrc.c

yaccsrc.ts.obj : $(SRCDIR)/yaccsrc.c $(SRCDIR)/defs.h $(SRCDIR)/rexx.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c -DYYMAXDEPTH=10000 $(SRCDIR)/yaccsrc.c

extstack.ts.obj : $(SRCDIR)/extstack.c $(SRCDIR)/rexx.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/extstack.c

rexxbif.ts.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexx.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/rexxbif.c

gci_convert.h: $(SRCDIR)\gci\gci_convert.win32.vc
        copy $(SRCDIR)\gci\gci_convert.win32.vc .\gci_convert.h

gci_call.ts.obj : $(SRCDIR)/gci/gci_call.c $(GCIHEADERS) gci_convert.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_call.c

gci_convert.ts.obj : $(SRCDIR)/gci/gci_convert.c $(GCIHEADERS) gci_convert.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_convert.c

gci_execute.ts.obj : $(SRCDIR)/gci/gci_execute.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_execute.c

gci_helper.ts.obj : $(SRCDIR)/gci/gci_helper.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_helper.c

gci_prepare.ts.obj : $(SRCDIR)/gci/gci_prepare.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_prepare.c

gci_reginabridge.ts.obj : $(SRCDIR)/gci/gci_reginabridge.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_reginabridge.c

gci_rxfuncdefine.ts.obj : $(SRCDIR)/gci/gci_rxfuncdefine.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_rxfuncdefine.c

gci_tree.ts.obj : $(SRCDIR)/gci/gci_tree.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_tree.c

#
# Rules for sample programs
#
test1.obj: $(SRCDIR)/test1.c
        $(CC) -c $(COPT) $(CC2O) $(DYN_COMP) $(SRCDIR)/test1.c

test1.dll: test1.obj regina.dll
        $(LD_RXLIBPRE) $(LD_RXLIB1) test1.obj $(LINKSHL)

test2.obj: $(SRCDIR)/test2.c
        $(CC) -c $(COPT) $(CC2O) $(DYN_COMP) $(SRCDIR)/test2.c

test2.dll: test2.obj regina.dll
        $(LD_RXLIBPRE) $(LD_RXLIB2) test2.obj $(LINKSHL)

#
# Rules for resources
#
reginaw32dll.obj reginaw32dll.res: $(SRCDIR)/reginaw32dll.rc
        -copy $(SRCDIR)\reginaw32.ico .
        rc /r /foreginaw32dll.res /i$(SRCDIR) $(SRCDIR)\reginaw32dll.rc
        cvtres /MACHINE:IX86 /NOLOGO /OUT:reginaw32dll.obj reginaw32dll.res
#
reginatsw32dll.obj reginatsw32dll.res: $(SRCDIR)/reginatsw32dll.rc
        -copy $(SRCDIR)\reginaw32.ico .
        rc /r /foreginatsw32dll.res /i$(SRCDIR) $(SRCDIR)\reginatsw32dll.rc
        cvtres /MACHINE:IX86 /NOLOGO /OUT:reginatsw32dll.obj reginatsw32dll.res
#
reginaw32exe.obj reginaw32exe.res: $(SRCDIR)/reginaw32exe.rc
        -copy $(SRCDIR)\reginaw32.ico .
        rc /r /foreginaw32exe.res /i$(SRCDIR)\ $(SRCDIR)\reginaw32exe.rc
        cvtres /MACHINE:IX86 /NOLOGO /OUT:reginaw32exe.obj reginaw32exe.res
#
rexxw32exe.obj rexxw32exe.res: $(SRCDIR)/rexxw32exe.rc
        -copy $(SRCDIR)\reginaw32.ico .
        rc /r /forexxw32exe.res /i$(SRCDIR)\ $(SRCDIR)\rexxw32exe.rc
        cvtres /MACHINE:IX86 /NOLOGO /OUT:rexxw32exe.obj rexxw32exe.res
#
rxstackw32exe.obj rxstackw32exe.res: $(SRCDIR)/rxstackw32exe.rc
        -copy $(SRCDIR)\reginaw32.ico .
        rc /r /forxstackw32exe.res /i$(SRCDIR)\ $(SRCDIR)\rxstackw32exe.rc
        cvtres /MACHINE:IX86 /NOLOGO /OUT:rxstackw32exe.obj rxstackw32exe.res
#
rxqueuew32exe.obj rxqueuew32exe.res: $(SRCDIR)/rxqueuew32exe.rc
        -copy $(SRCDIR)\reginaw32.ico .
        rc /r /forxqueuew32exe.res /i$(SRCDIR)\ $(SRCDIR)\rxqueuew32exe.rc
        cvtres /MACHINE:IX86 /NOLOGO /OUT:rxqueuew32exe.obj rxqueuew32exe.res
#

ARCHIVE_FILES = $(ALLSRC) $(README) $(SRCDIR)/makefile.* $(SRCDIR)/oldmakefiles/makefile* \
        $(SRCDIR)/oldmakefiles/README $(SRCDIR)/*.rsp $(DEMOFILES) $(TRIPFILES) \
        $(CONFFILES) $(SRCDIR)/*.def $(SRCDIR)/*.ico $(SRCDIR)/*.rc \
        $(SRCDIR)/file_id* $(SRCDIR)/*.bat $(SRCDIR)/*.cmd $(YACCLEX_FILES) \
        $(SRCDIR)/*.rexx $(UNIXFILES)

zip:
        zip regna$(VER) $(ARCHIVE_FILES)

#
# Build NSIS package...
#
dist: all
	copy $(SRCDIR)\regina_ss.ini .
	copy $(SRCDIR)\regina_fa.ini .
	copy $(SRCDIR)\regina_mt.ini .
	copy $(SRCDIR)\regina.nsi .
	copy $(SRCDIR)\common\isnt.nsh .
	copy $(SRCDIR)\common\path.nsh .
	copy $(SRCDIR)\common\WriteEnv.nsh .
	copy $(SRCDIR)\common\uninstall.ico .
	makensis /DVERSION=$(VERDOT) /DNODOTVER=$(VER) /DSRCDIR=$(SRCDIR) regina.nsi
