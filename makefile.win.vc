#
# Makefile for Regina REXX Interpreter
#
# Using MS Visual C++ under Win32 or Win64
#
# !included from makefile.win32.vc or makefile.win64.vc
#
# NOT TO BE USED DIRECTLY
#
COMMONSRCDIR=$(SRCDIR)\common
REGUTILSRCDIR=$(SRCDIR)\regutil
#
#                      USER CONFIGURABLE VARIABLES
#
# Please specify the current directory of the sources:
#
#SRCDIR=path_to_this_file
#

!include $(SRCDIR)\regina.ver
VERDOT = $(VER_DOT)
VERDATE = $(VER_DATE)

CC = cl

!if "$(DEBUG)" == "Y"
EEXTRA = /DEBUG /MACHINE:$(MACH)
DEBUGFLAG  = /Zi /Od /J /DDEBUG #/DREGINA_DEBUG_MEMORY /DREGINA_DEBUG_MEMORY1 /DREGINA_DEBUG_MEMORY2 /DREGINA_DEBUG_MEMORY3
OPTIMIZE =
! if "$(TRACEMEM)" == "Y"
MEMTRACE = /DTRACEMEM
! else
MEMTRACE =
TRACEMEM = N
! endif
!else
EEXTRA = /release /PDB:nul /incremental:no /MACHINE:$(MACH)
DEBUGFLAG  = /DNDEBUG
OPTIMIZE = /Ox /J #-O2gityb1 -J
DEBUG = N
TRACEMEM = N
!endif

!if "$(FLISTS)" == "N"
NOFLISTS = /DNOFLISTS
!else
NOFLISTS =
FLISTS = Y
!endif

#
# GCI is default
#
!if "$(GCI)" == "N"
GCI_SHO =
HAVE_GCI =
!else
GCI_SHO = gci_call.ts.obj gci_convert.ts.obj gci_execute.ts.obj gci_helper.ts.obj gci_prepare.ts.obj gci_reginabridge.ts.obj gci_rxfuncdefine.ts.obj gci_tree.ts.obj
HAVE_GCI = -DHAVE_GCI -I$(SRCDIR)\gci -I.
!endif

THREADING = /MT

DYN_COMP = /LD /DDYNAMIC
TSDYN_COMP = /LD /DDYNAMIC

!ifdef "$(SOCKET)"
REXXSOCKET=-DRXSOCKET=$(SOCKET)
!else
REXXSOCKET=-DRXSOCKET=5757
SOCKET=5757
!endif

LIBS = advapi32.lib #user32.lib #libc.lib
WINSOCK = wsock32.lib
SERVICELIBS = kernel32.lib advapi32.lib shell32.lib #libcmt.lib
SHL_TARGETS= regina.exe rxtest1.dll rxtest2.dll rxtest1.lib rxtest2.lib regutil.dll regutil.lib
LD     = link
LIBFLAGS = /OUT:rexx.lib
LIBLINK = regina.lib
LINKSHL = regina.lib
LD_RXLIBPRE=link /NOLOGO /DLL /OUT:$@
LD_RXLIB1= /DEF:$(SRCDIR)\test1_$(LARCH)_dll.def
LD_RXLIB2= /DEF:$(SRCDIR)\test2_$(LARCH)_dll.def
LD_REGUTIL = /PDB:regutil.pdb /DEF:$(REGUTILSRCDIR)\regutil.def $(EEXTRA)
MV= -ren
#
CEXTRA = -DWIN32 -nologo -W4 -DHAVE_PROTO $(REXXSOCKET) $(HAVE_GCI) -DREGINA_VERSION_DATE=\"$(VER_DATE)\" -DREGINA_VERSION_MAJOR=\"$(VER_MAJOR)\" -DREGINA_VERSION_MINOR=\"$(VER_MINOR)\" -DREGINA_VERSION_RELEASE=\"$(VER_RELEASE)\" -DREGINA_VERSION_SUPP=\"$(VER_SUPP)\" -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS -DREGINA_BITS=$(BITS)

CC2O=-Fo$@
#
# Include the common rules for the interpreter
#

#
# Some settings that you may wish to change, these are used only
# for the 'install' target:
#
#   TOPDIR    The top of the directory hierarchy in which to install
#   BINDIR    Where to install the compiled 'rexx' program
#   LIBDIR    Where to install the 'regina' library
#   MANEXT    The extention of the manual page
#   MANDIR    Where to install the manual page
#   PROGNAME  What to call the compiled program
#
BINDIR = $(TOPDIR)/bin
LIBDIR = $(TOPDIR)/lib

COPT = $(OPTIMIZE) $(DEBUGFLAG) $(CEXTRA) -I$(SRCDIR) $(MEMTRACE) $(NOFLISTS) -DREGINA_SINGLE_THREADED
TSCOPT = $(OPTIMIZE) $(DEBUGFLAG) $(CEXTRA) -I$(SRCDIR) $(MEMTRACE) $(NOFLISTS) $(THREADING)
LINKOPT = $(EEXTRA) /NOLOGO /VERSION:$(VER_MAJOR).$(VER_MINOR) /MANIFEST
OTHERCOPT = $(OPTIMIZE) $(DEBUGFLAG) $(CEXTRA) -I$(SRCDIR) $(MEMTRACE) $(NOFLISTS) -DREGINA_SINGLE_THREADED
OTHERTSCOPT = $(OPTIMIZE) $(DEBUGFLAG) $(CEXTRA) -I$(SRCDIR) $(MEMTRACE) $(NOFLISTS) $(THREADING)
REGUTILCOPT = $(COPT) -DNOT_LIKE_IBM -DMAPVIEWOFFILE $(DEBUGFLAG)

README = $(SRCDIR)/README.??? $(SRCDIR)/COPYING-LIB $(SRCDIR)/BUGS $(SRCDIR)/yaccsrc.bound

CSRCFILES = $(SRCDIR)/funcs.c $(SRCDIR)/builtin.c $(SRCDIR)/error.c $(SRCDIR)/variable.c \
        $(SRCDIR)/interprt.c $(SRCDIR)/debug.c $(SRCDIR)/dbgfuncs.c $(SRCDIR)/memory.c $(SRCDIR)/parsing.c $(SRCDIR)/files.c \
        $(SRCDIR)/misc.c $(SRCDIR)/unxfuncs.c $(SRCDIR)/arxfuncs.c $(SRCDIR)/cmsfuncs.c $(SRCDIR)/os2funcs.c $(SRCDIR)/shell.c $(SRCDIR)/rexxext.c $(SRCDIR)/stack.c \
        $(SRCDIR)/tracing.c $(SRCDIR)/interp.c $(SRCDIR)/cmath.c $(SRCDIR)/convert.c $(SRCDIR)/strengs.c $(SRCDIR)/library.c \
        $(SRCDIR)/strmath.c $(SRCDIR)/signals.c $(SRCDIR)/macros.c $(SRCDIR)/envir.c $(SRCDIR)/expr.c $(SRCDIR)/rexxbif.c \
        $(SRCDIR)/wrappers.c $(SRCDIR)/options.c $(SRCDIR)/os_win.c $(SRCDIR)/extstack.c \
        $(SRCDIR)/mt_notmt.c $(SRCDIR)/mt_$(WARCH).c $(SRCDIR)/mt_posix.c $(SRCDIR)/nosaa.c \
        $(SRCDIR)/ntservice/service.c $(SRCDIR)/os_other.c

OFILES = funcs.obj builtin.obj error.obj variable.obj \
        interprt.obj debug.obj dbgfuncs.obj memory.obj parsing.obj files.obj \
        misc.obj unxfuncs.obj arxfuncs.obj cmsfuncs.obj os2funcs.obj shell.obj rexxext.obj stack.obj extstack.obj \
        tracing.obj interp.obj cmath.obj convert.obj strengs.obj library.obj \
        strmath.obj signals.obj macros.obj envir.obj expr.obj instore.obj rexxbif.obj \
        yaccsrc.obj lexsrc.obj options.obj os_win.obj wrappers.obj mt_notmt.obj time64.obj \
        os_other.obj mygetopt.obj

TSFILES = funcs.ts.obj builtin.ts.obj error.ts.obj variable.ts.obj extstack.ts.obj rexxbif.ts.obj \
        interprt.ts.obj debug.ts.obj dbgfuncs.ts.obj memory.ts.obj parsing.ts.obj files.ts.obj \
        misc.ts.obj unxfuncs.ts.obj arxfuncs.ts.obj cmsfuncs.ts.obj os2funcs.ts.obj shell.ts.obj rexxext.ts.obj stack.ts.obj \
        tracing.ts.obj interp.ts.obj cmath.ts.obj convert.ts.obj strengs.ts.obj library.ts.obj \
        strmath.ts.obj signals.ts.obj macros.ts.obj envir.ts.obj expr.ts.obj instore.ts.obj \
        yaccsrc.ts.obj lexsrc.ts.obj wrappers.ts.obj options.ts.obj os_win.ts.obj \
        rexx.ts.obj client.ts.obj rexxsaa.ts.obj mt_$(WARCH).ts.obj time64.ts.obj \
        os_other.ts.obj $(GCI_SHO) mygetopt.ts.obj

STATFILES = funcs.stat.obj builtin.stat.obj error.stat.obj variable.stat.obj extstack.stat.obj rexxbif.stat.obj \
        interprt.stat.obj debug.stat.obj dbgfuncs.stat.obj memory.stat.obj parsing.stat.obj files.stat.obj \
        misc.stat.obj unxfuncs.stat.obj arxfuncs.stat.obj cmsfuncs.stat.obj os2funcs.stat.obj shell.stat.obj rexxext.stat.obj stack.stat.obj \
        tracing.stat.obj interp.stat.obj cmath.stat.obj convert.stat.obj strengs.stat.obj library.stat.obj \
        strmath.stat.obj signals.stat.obj macros.stat.obj envir.stat.obj expr.stat.obj instore.stat.obj \
        yaccsrc.stat.obj lexsrc.stat.obj wrappers.stat.obj options.stat.obj os_win.stat.obj\
        rexx.stat.obj client.stat.obj rexxsaa.stat.obj mt_$(WARCH).stat.obj time64.stat.obj \
        os_other.stat.obj $(GCI_SHO) mygetopt.stat.obj

REGUTILOFILES = regfilesys.obj regini.obj regmacrospace.obj regscreen.obj \
                regsem.obj regutil.obj rxsupport.obj random.obj regstem.obj regwin.obj \
                regunicode.obj regcrypt.obj regtrig.obj

REGUTILSTATFILES = regfilesys.stat.obj regini.stat.obj regmacrospace.stat.obj regscreen.stat.obj \
                regsem.stat.obj regutil.stat.obj rxsupport.stat.obj random.stat.obj regstem.stat.obj regwin.stat.obj \
                regunicode.stat.obj regcrypt.stat.obj regtrig.stat.obj

DEMODIR = $(SRCDIR)/demo
DEMOFILES = $(DEMODIR)/*
TRIPDIR = $(SRCDIR)/trip
TRIPFILES = $(TRIPDIR)/*
UNIXFILES = $(SRCDIR)/*.in $(SRCDIR)/configure $(SRCDIR)/config.sub \
        $(SRCDIR)/config.guess $(SRCDIR)/aclocal.m4 $(SRCDIR)/install-sh \
        $(SRCDIR)/INSTALL $(SRCDIR)/yaccsrc.y $(SRCDIR)/lexsrc.l

ALLSRC = $(CFILES) $(HFILES)

HFILES = $(SRCDIR)/rexx.h $(SRCDIR)/defs.h $(SRCDIR)/extern.h $(SRCDIR)/regina_t.h \
                $(SRCDIR)/strengs.h $(SRCDIR)/configur.h $(SRCDIR)/yaccsrc.h \
                $(SRCDIR)/rxiface.h $(SRCDIR)/rexxsaa.h $(SRCDIR)/utsname.h \
                $(SRCDIR)/mt.h $(SRCDIR)/mt_notmt.h $(SRCDIR)/mt_$(WARCH).h $(SRCDIR)/mt_posix.h \
                $(SRCDIR)/ntservice/service.h
CFILES = $(SRCDIR)/yaccsrc.c $(SRCDIR)/lexsrc.c $(CSRCFILES) $(SRCDIR)/execiser.c \
                $(SRCDIR)/rexxsaa.c $(SRCDIR)/rexx.c $(SRCDIR)/regina.c $(SRCDIR)/client.c \
                $(SRCDIR)/r2perl.c $(SRCDIR)/test1.c $(SRCDIR)/test2.c

MTSSRC = $(SRCDIR)/en.mts $(SRCDIR)/pt.mts $(SRCDIR)/no.mts \
   $(SRCDIR)/de.mts $(SRCDIR)/es.mts $(SRCDIR)/pl.mts \
   $(SRCDIR)/tr.mts $(SRCDIR)/sv.mts

GCIHEADERS = $(SRCDIR)\gci\gci.h $(SRCDIR)\gci\embedded.h

#.SUFFIXES: .sho $(SUFFIXES)
#
# Do not use default suffixes rule
#
.SUFFIXES:

all : how trexx.exe rexx.exe rexx.lib $(SHL_TARGETS) rxstack.exe rxqueue.exe threader.exe execiser.exe mtb_files

how:
	echo nmake -f $(SRCDIR)\makefile.$(WARCH).vc DEBUG=$(DEBUG) TRACEMEM=$(TRACEMEM) FLISTS=$(FLISTS) SOCKET=$(SOCKET) ^%1 ^%2 > rebuild.bat

$(CSRCFILES) $(CFILES) : $(SRCDIR)/rexx.h

$(SRCDIR)/rexx.h : $(SRCDIR)/extern.h $(SRCDIR)/strengs.h $(SRCDIR)/defs.h $(SRCDIR)/regina_t.h $(SRCDIR)/mt.h

#
# trexx.exe is a temporary Rexx interpreter used to update version
# information in .rc files
trexx.exe : $(OFILES) rexx.obj nosaa.obj
   $(LD) /PDB:$*.pdb $(LINKOPT) /STACK:0x10000000 $(STATIC_LDFLAGS) /OUT:trexx.exe $(OFILES) rexx.obj nosaa.obj $(LIBS) $(WINSOCK)

rexx.exe : $(OFILES) rexx.obj rexx$(LARCH)exe.obj nosaa.obj rexx.exe.mf
   $(LD) /PDB:$*.pdb $(LINKOPT) /STACK:0x10000000 $(STATIC_LDFLAGS) /OUT:rexx.exe $(OFILES) rexx.obj rexx$(LARCH)exe.obj nosaa.obj $(LIBS) $(WINSOCK)
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;1

regina.exe : regina.dll regina.obj regina$(LARCH)exe.obj regina.exe.mf
   $(LD) /PDB:$*.pdb $(LINKOPT) /STACK:0x10000000 $(DYNAMIC_LDFLAGS) /OUT:regina.exe regina.obj regina$(LARCH)exe.obj $(LIBS) $(LIBLINK) $(WINSOCK)
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;1

execiser.exe : execiser.obj regina.dll execiser.exe.mf
   $(LD) /PDB:$*.pdb $(LINKOPT) /OUT:execiser.exe execiser.obj $(LIBLINK)
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;1

rxqueue.exe : rxqueue.obj erexxbif.obj eextstack.obj rxqueue$(LARCH)exe.obj mygetopt.obj rxqueue.exe.mf
   $(LD) /PDB:$*.pdb $(LINKOPT) /OUT:rxqueue.exe rxqueue.obj erexxbif.obj eextstack.obj rxqueue$(LARCH)exe.obj mygetopt.obj $(WINSOCK)
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;1

rxstack.exe : rxstack.obj erexxbif_mt.obj eextstack_mt.obj service.obj rxstack$(LARCH)exe.obj LibSha1.obj mygetopt.obj rxstack.exe.mf
   $(LD) /PDB:$*.pdb $(LINKOPT) /OUT:rxstack.exe rxstack.obj erexxbif_mt.obj eextstack_mt.obj service.obj rxstack$(LARCH)exe.obj LibSha1.obj mygetopt.obj $(WINSOCK) $(SERVICELIBS)
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;1

threader.exe : threader.obj regina.dll threader.exe.mf
   $(LD) /PDB:$*.pdb $(LINKOPT) /OUT:threader.exe threader.obj $(LIBLINK)
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;1

rexx.lib: $(OFILES) client.obj drexx.obj rexxsaa.obj
   lib $(LIBFLAGS) $(OFILES) client.obj drexx.obj rexxsaa.obj

regina.dll: $(TSFILES) regina$(LARCH)dll.obj regina.dll.mf
   $(LD) /PDB:$*_dll.pdb $(LINKOPT) /DLL /BASE:0x6B000000 /OUT:regina.dll /MAP:regina_dd.map /IMPLIB:regina.lib /DEF:$(SRCDIR)\regina_$(LARCH)_dll.def regina$(LARCH)dll.obj *.ts.obj $(LIBS) $(WINSOCK)
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;2

sregina.exe: $(STATFILES)
   $(LD) /PDB:$*.pdb ?? /OUT:sregina.exe $(STATFILES) $(STATICFUNCTIONLIBS)

#
# Convert .mts to .mtb
#
mtb_files: msgcmp.exe $(MTSSRC)
        msgcmp $(MTSSRC)

msgcmp.exe: msgcmp.obj
        $(LD) $(LINKOPT) /OUT:msgcmp.exe msgcmp.obj

msgcmp.obj: $(SRCDIR)/msgcmp.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/msgcmp.c

#
# Rules for static objects
#
funcs.obj :   $(SRCDIR)/funcs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/funcs.c

builtin.obj : $(SRCDIR)/builtin.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/builtin.c

error.obj :   $(SRCDIR)/error.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/error.c

variable.obj :$(SRCDIR)/variable.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/variable.c

interprt.obj :$(SRCDIR)/interprt.c $(SRCDIR)\regina.ver
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/interprt.c

debug.obj :   $(SRCDIR)/debug.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/debug.c

dbgfuncs.obj :$(SRCDIR)/dbgfuncs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/dbgfuncs.c

memory.obj :  $(SRCDIR)/memory.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/memory.c

parsing.obj : $(SRCDIR)/parsing.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/parsing.c

files.obj :   $(SRCDIR)/files.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/files.c

misc.obj :    $(SRCDIR)/misc.c $(SRCDIR)\regina.ver
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/misc.c

unxfuncs.obj :$(SRCDIR)/unxfuncs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/unxfuncs.c

arxfuncs.obj :$(SRCDIR)/arxfuncs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/arxfuncs.c

os2funcs.obj :$(SRCDIR)/os2funcs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/os2funcs.c

cmsfuncs.obj :$(SRCDIR)/cmsfuncs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/cmsfuncs.c

shell.obj :   $(SRCDIR)/shell.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/shell.c

rexxext.obj : $(SRCDIR)/rexxext.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/rexxext.c

stack.obj :   $(SRCDIR)/stack.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/stack.c

tracing.obj : $(SRCDIR)/tracing.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/tracing.c

interp.obj :  $(SRCDIR)/interp.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/interp.c

cmath.obj :   $(SRCDIR)/cmath.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/cmath.c

convert.obj : $(SRCDIR)/convert.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/convert.c

strengs.obj : $(SRCDIR)/strengs.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/strengs.c

library.obj : $(SRCDIR)/library.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/library.c

strmath.obj : $(SRCDIR)/strmath.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/strmath.c

signals.obj : $(SRCDIR)/signals.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/signals.c

macros.obj :  $(SRCDIR)/macros.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/macros.c

envir.obj :   $(SRCDIR)/envir.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/envir.c

expr.obj :    $(SRCDIR)/expr.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/expr.c

wrappers.obj :$(SRCDIR)/wrappers.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/wrappers.c

options.obj : $(SRCDIR)/options.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/options.c

os_win.obj :  $(SRCDIR)/os_win.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/os_win.c

os_other.obj :  $(SRCDIR)/os_other.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/os_other.c

rexx.obj :    $(SRCDIR)/rexx.c $(SRCDIR)\regina.ver
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/rexx.c

client.obj :    $(SRCDIR)/client.c $(SRCDIR)\regina.ver
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/client.c

rexxsaa.obj :    $(SRCDIR)/rexxsaa.c   $(SRCDIR)\rexxsaa.h $(SRCDIR)\regina.ver
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/rexxsaa.c

regina.obj :  $(SRCDIR)/regina.c
        $(CC) $(TSCOPT) $(CC2O) -c $(SRCDIR)/regina.c

drexx.obj : $(SRCDIR)/rexx.c $(SRCDIR)\regina.ver
        $(CC) $(COPT) -c -DRXLIB $(CC2O) $(SRCDIR)/rexx.c

mt_notmt.obj : $(SRCDIR)/mt_notmt.c
        $(CC) $(COPT) -c $(CC2O) $(SRCDIR)/mt_notmt.c

mt_$(WARCH).obj : $(SRCDIR)/mt_$(WARCH).c
        $(CC) $(COPT) -c $(CC2O) $(SRCDIR)/mt_$(WARCH).c

nosaa.obj : $(SRCDIR)/nosaa.c
        $(CC) $(COPT) -c $(CC2O) $(SRCDIR)/nosaa.c

instore.obj : $(SRCDIR)/instore.c $(SRCDIR)\regina.ver
        $(CC) $(COPT) -c $(CC2O) $(SRCDIR)/instore.c

lexsrc.obj : $(SRCDIR)/lexsrc.c $(SRCDIR)/rexx.h $(SRCDIR)/yaccsrc.h
        $(CC) $(OTHERCOPT) $(CC2O) -c $(SRCDIR)/lexsrc.c

yaccsrc.obj : $(SRCDIR)/yaccsrc.c $(SRCDIR)/defs.h $(SRCDIR)/rexx.h
        $(CC) $(OTHERCOPT) $(CC2O) -c -DYYMAXDEPTH=10000 $(SRCDIR)/yaccsrc.c

extstack.obj : $(SRCDIR)/extstack.c $(SRCDIR)/rexx.h
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/extstack.c

execiser.obj : $(SRCDIR)/execiser.c $(SRCDIR)/rexx.h
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/execiser.c

rxqueue.obj : $(SRCDIR)/rxqueue.c $(SRCDIR)/rexx.h
        $(CC) -DEXTERNAL_TO_REGINA $(COPT) $(CC2O) -c $(SRCDIR)/rxqueue.c

rxstack.obj : $(SRCDIR)/rxstack.c $(SRCDIR)/rexx.h $(SRCDIR)/ntservice/service.h
        $(CC) -DEXTERNAL_TO_REGINA -DBUILD_NT_SERVICE -I$(SRCDIR)/ntservice -I$(SRCDIR)/contrib/win $(TSCOPT) $(CC2O) -c $(SRCDIR)/rxstack.c

service.obj : $(SRCDIR)/ntservice/service.c $(SRCDIR)/ntservice/service.h
        $(CC) -I$(SRCDIR)/ntservice $(TSCOPT) $(CC2O) -c $(SRCDIR)/ntservice/service.c

rexxbif.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexxbif.h
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/rexxbif.c

rexxbif_mt.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexxbif.h
        $(CC) $(TSCOPT) $(CC2O) -c $(SRCDIR)/rexxbif.c

erexxbif.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexxbif.h
        $(CC) -DEXTERNAL_TO_REGINA $(COPT) $(CC2O) -c $(SRCDIR)/rexxbif.c

erexxbif_mt.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexxbif.h
        $(CC) -DEXTERNAL_TO_REGINA $(TSCOPT) $(CC2O) -c $(SRCDIR)/rexxbif.c

eextstack.obj : $(SRCDIR)/extstack.c $(SRCDIR)/rexx.h
        $(CC) -DEXTERNAL_TO_REGINA $(COPT) $(CC2O) -c $(SRCDIR)/extstack.c

eextstack_mt.obj : $(SRCDIR)/extstack.c $(SRCDIR)/rexx.h
        $(CC) -DEXTERNAL_TO_REGINA $(TSCOPT) $(CC2O) -c $(SRCDIR)/extstack.c

time64.obj : $(SRCDIR)/contrib/time64.c $(SRCDIR)/rexx.h $(SRCDIR)/contrib/time64.h
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/contrib/time64.c

LibSha1.obj : $(SRCDIR)/contrib/LibSha1.c $(SRCDIR)/contrib/LibSha1.h
        $(CC) $(COPT) $(CC2O) -c -I$(SRCDIR)/contrib/win $(SRCDIR)/contrib/LibSha1.c

mygetopt.obj : $(SRCDIR)/mygetopt.c
        $(CC) $(COPT) $(CC2O) -c $(SRCDIR)/mygetopt.c

#
# Rules for thread-safe shared objects
#
threader.obj : $(SRCDIR)/threader.c $(SRCDIR)/rexxsaa.h
        $(CC) $(TSCOPT) $(CC2O) -DWIN32_THREADS -c $(SRCDIR)/threader.c

funcs.ts.obj :   $(SRCDIR)/funcs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/funcs.c

builtin.ts.obj : $(SRCDIR)/builtin.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/builtin.c

error.ts.obj :   $(SRCDIR)/error.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/error.c

variable.ts.obj :$(SRCDIR)/variable.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/variable.c

interprt.ts.obj :$(SRCDIR)/interprt.c $(SRCDIR)\regina.ver
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/interprt.c

debug.ts.obj :   $(SRCDIR)/debug.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/debug.c

dbgfuncs.ts.obj :$(SRCDIR)/dbgfuncs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/dbgfuncs.c

memory.ts.obj :  $(SRCDIR)/memory.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/memory.c

parsing.ts.obj : $(SRCDIR)/parsing.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/parsing.c

files.ts.obj :   $(SRCDIR)/files.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/files.c

misc.ts.obj :    $(SRCDIR)/misc.c $(SRCDIR)\regina.ver
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/misc.c

unxfuncs.ts.obj :$(SRCDIR)/unxfuncs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/unxfuncs.c

arxfuncs.ts.obj :$(SRCDIR)/arxfuncs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/arxfuncs.c

os2funcs.ts.obj :$(SRCDIR)/os2funcs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/os2funcs.c

cmsfuncs.ts.obj :$(SRCDIR)/cmsfuncs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/cmsfuncs.c

shell.ts.obj :   $(SRCDIR)/shell.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/shell.c

rexxext.ts.obj : $(SRCDIR)/rexxext.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/rexxext.c

stack.ts.obj :   $(SRCDIR)/stack.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/stack.c

tracing.ts.obj : $(SRCDIR)/tracing.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/tracing.c

interp.ts.obj :  $(SRCDIR)/interp.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/interp.c

cmath.ts.obj :   $(SRCDIR)/cmath.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/cmath.c

convert.ts.obj : $(SRCDIR)/convert.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/convert.c

strengs.ts.obj : $(SRCDIR)/strengs.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/strengs.c

library.ts.obj : $(SRCDIR)/library.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/library.c

strmath.ts.obj : $(SRCDIR)/strmath.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/strmath.c

signals.ts.obj : $(SRCDIR)/signals.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/signals.c

macros.ts.obj :  $(SRCDIR)/macros.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/macros.c

envir.ts.obj :   $(SRCDIR)/envir.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/envir.c

expr.ts.obj :    $(SRCDIR)/expr.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/expr.c

wrappers.ts.obj :$(SRCDIR)/wrappers.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/wrappers.c

options.ts.obj : $(SRCDIR)/options.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/options.c

os_win.ts.obj :  $(SRCDIR)/os_win.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/os_win.c

os_other.ts.obj :  $(SRCDIR)/os_other.c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/os_other.c

client.ts.obj :  $(SRCDIR)/client.c $(SRCDIR)\regina.ver
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/client.c

rexxsaa.ts.obj :  $(SRCDIR)/rexxsaa.c  $(SRCDIR)\rexxsaa.h $(SRCDIR)\regina.ver
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/rexxsaa.c

rexx.ts.obj : $(SRCDIR)/rexx.c $(SRCDIR)\regina.ver
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c -DRXLIB $(SRCDIR)/rexx.c

instore.ts.obj :  $(SRCDIR)/instore.c $(SRCDIR)\regina.ver
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/instore.c

mt_$(WARCH).ts.obj :$(SRCDIR)/mt_$(WARCH).c
        $(CC) $(TSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/mt_$(WARCH).c

lexsrc.ts.obj : $(SRCDIR)/lexsrc.c $(SRCDIR)/rexx.h $(SRCDIR)/yaccsrc.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/lexsrc.c

yaccsrc.ts.obj : $(SRCDIR)/yaccsrc.c $(SRCDIR)/defs.h $(SRCDIR)/rexx.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c -DYYMAXDEPTH=10000 $(SRCDIR)/yaccsrc.c

extstack.ts.obj : $(SRCDIR)/extstack.c $(SRCDIR)/rexx.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/extstack.c

rexxbif.ts.obj : $(SRCDIR)/rexxbif.c $(SRCDIR)/rexx.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/rexxbif.c

gci_convert.h: $(SRCDIR)\gci\gci_convert.$(WARCH).vc
        copy $(SRCDIR)\gci\gci_convert.$(WARCH).vc .\gci_convert.h

gci_call.ts.obj : $(SRCDIR)/gci/gci_call.c $(GCIHEADERS) gci_convert.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_call.c

gci_convert.ts.obj : $(SRCDIR)/gci/gci_convert.c $(GCIHEADERS) gci_convert.h
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_convert.c

gci_execute.ts.obj : $(SRCDIR)/gci/gci_execute.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_execute.c

gci_helper.ts.obj : $(SRCDIR)/gci/gci_helper.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_helper.c

gci_prepare.ts.obj : $(SRCDIR)/gci/gci_prepare.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_prepare.c

gci_reginabridge.ts.obj : $(SRCDIR)/gci/gci_reginabridge.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_reginabridge.c

gci_rxfuncdefine.ts.obj : $(SRCDIR)/gci/gci_rxfuncdefine.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_rxfuncdefine.c

gci_tree.ts.obj : $(SRCDIR)/gci/gci_tree.c $(GCIHEADERS)
        $(CC) $(OTHERTSCOPT) $(CC2O) $(TSDYN_COMP) -c $(SRCDIR)/gci/gci_tree.c

time64.ts.obj : $(SRCDIR)/contrib/time64.c $(SRCDIR)/rexx.h $(SRCDIR)/contrib/time64.h
        $(CC) $(TSCOPT) $(CC2O) -c $(SRCDIR)/contrib/time64.c

mygetopt.ts.obj : $(SRCDIR)/mygetopt.c
        $(CC) $(TSCOPT) $(CC2O) -c $(SRCDIR)/mygetopt.c

#
# Rules for Regutil
#
# ole32.lib oleaut32.lib uuid.lib
regutil.dll: $(REGUTILOFILES) regutil.dll.mf
   $(LD_RXLIBPRE) $(LINKOPT) $(LD_REGUTIL) $(REGUTILOFILES) $(LINKSHL) kernel32.lib advapi32.lib user32.lib
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;2
   del regutil.lib

regfilesys.obj : $(REGUTILSRCDIR)/regfilesys.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regfilesys.c

regini.obj : $(REGUTILSRCDIR)/regini.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regini.c

regmacrospace.obj : $(REGUTILSRCDIR)/regmacrospace.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regmacrospace.c

regscreen.obj : $(REGUTILSRCDIR)/regscreen.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regscreen.c

regsem.obj : $(REGUTILSRCDIR)/regsem.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regsem.c

regsysparm.obj : $(REGUTILSRCDIR)/regsysparm.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regsysparm.c

regutil.obj : $(REGUTILSRCDIR)/regutil.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regutil.c

rxsupport.obj : $(REGUTILSRCDIR)/rxsupport.c $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/rxsupport.c

random.obj : $(REGUTILSRCDIR)/random.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/random.c

regstem.obj : $(REGUTILSRCDIR)/regstem.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regstem.c

regwin.obj : $(REGUTILSRCDIR)/regwin.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regwin.c

regunicode.obj : $(REGUTILSRCDIR)/regunicode.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regunicode.c

regcrypt.obj : $(REGUTILSRCDIR)/regcrypt.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regcrypt.c

regtrig.obj : $(REGUTILSRCDIR)/regtrig.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) $(DYN_COMP) $(REGUTILSRCDIR)/regtrig.c

#
#
regutil.lib: $(REGUTILSTATFILES)
   lib /OUT:regutil.lib $(REGUTILSTATFILES)

regfilesys.stat.obj : $(REGUTILSRCDIR)/regfilesys.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regfilesys.c

regini.stat.obj : $(REGUTILSRCDIR)/regini.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regini.c

regmacrospace.stat.obj : $(REGUTILSRCDIR)/regmacrospace.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regmacrospace.c

regscreen.stat.obj : $(REGUTILSRCDIR)/regscreen.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regscreen.c

regsem.stat.obj : $(REGUTILSRCDIR)/regsem.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regsem.c

regsysparm.stat.obj : $(REGUTILSRCDIR)/regsysparm.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regsysparm.c

regutil.stat.obj : $(REGUTILSRCDIR)/regutil.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regutil.c

rxsupport.stat.obj : $(REGUTILSRCDIR)/rxsupport.c $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/rxsupport.c

random.stat.obj : $(REGUTILSRCDIR)/random.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/random.c

regstem.stat.obj : $(REGUTILSRCDIR)/regstem.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regstem.c

regwin.stat.obj : $(REGUTILSRCDIR)/regwin.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regwin.c

regunicode.stat.obj : $(REGUTILSRCDIR)/regunicode.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regunicode.c

regcrypt.stat.obj : $(REGUTILSRCDIR)/regcrypt.c
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regcrypt.c

regtrig.stat.obj : $(REGUTILSRCDIR)/regtrig.c $(REGUTILSRCDIR)/regutil.h $(REGUTILSRCDIR)/rxproto.h
   $(CC) -c $(REGUTILCOPT) $(CC2O) /DDYNAMIC_STATIC $(REGUTILSRCDIR)/regtrig.c

#
# Rules for sample programs
#
test1.dll.obj: $(SRCDIR)/test1.c
   $(CC) -c $(COPT) $(CC2O) $(DYN_COMP) $(SRCDIR)/test1.c

rxtest1.dll: test1.dll.obj regina.dll rxtest1.dll.mf
   $(LD_RXLIBPRE) $(LINKOPT) $(LD_RXLIB1) test1.dll.obj $(LINKSHL)
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;2
   del rxtest1.lib

test1.obj: $(SRCDIR)/test1.c
   $(CC) -c $(COPT) $(CC2O) /DDYNAMIC_STATIC $(SRCDIR)/test1.c

rxtest1.lib: test1.obj
   lib /OUT:rxtest1.lib test1.obj

test2.dll.obj: $(SRCDIR)/test2.c
   $(CC) -c $(COPT) $(CC2O) $(DYN_COMP) $(SRCDIR)/test2.c

rxtest2.dll: test2.dll.obj regina.dll rxtest2.dll.mf
   $(LD_RXLIBPRE) $(LINKOPT) $(LD_RXLIB2) test2.dll.obj $(LINKSHL)
   mt.exe /manifest $@.manifest $@.mf /outputresource:$@;2
   del rxtest2.lib

test2.obj: $(SRCDIR)/test2.c
   $(CC) -c $(COPT) $(CC2O) /DDYNAMIC_STATIC $(SRCDIR)/test2.c

rxtest2.lib: test2.obj
   lib /OUT:rxtest2.lib test2.obj

#
# Rules for resource files and version details
# We use the temporary rexx executable; trexx.exe
#
.\reginadll.rc: trexx.exe $(SRCDIR)\regina.ver $(SRCDIR)\reginawindll.rc
   .\trexx $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\reginawindll.rc $@ $(VERDOT) $(BITS) regina $(VERDATE)
.\reginaexe.rc: trexx.exe $(SRCDIR)\regina.ver $(SRCDIR)\reginawinexe.rc
   .\trexx $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\reginawinexe.rc $@ $(VERDOT) $(BITS) regina $(VERDATE)
.\rxstackexe.rc: trexx.exe $(SRCDIR)\regina.ver $(SRCDIR)\rxstackwinexe.rc
   .\trexx $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\rxstackwinexe.rc $@ $(VERDOT) $(BITS) regina $(VERDATE)
.\rxqueueexe.rc: trexx.exe $(SRCDIR)\regina.ver $(SRCDIR)\rxqueuewinexe.rc
   .\trexx $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\rxqueuewinexe.rc $@ $(VERDOT) $(BITS) regina $(VERDATE)
.\rexxexe.rc: trexx.exe $(SRCDIR)\regina.ver $(SRCDIR)\rexxwinexe.rc
   .\trexx $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\rexxwinexe.rc $@ $(VERDOT) $(BITS) regina $(VERDATE)

#
# Rules for resources
#
regina$(LARCH)dll.obj regina$(LARCH)dll.res: .\reginadll.rc
   -copy $(SRCDIR)\reginaw32.ico .
   rc /r /foregina$(LARCH)dll.res /i$(SRCDIR) .\reginadll.rc
   cvtres /MACHINE:$(MACH) /NOLOGO /OUT:regina$(LARCH)dll.obj regina$(LARCH)dll.res
#

regina$(LARCH)exe.obj regina$(LARCH)exe.res: .\reginaexe.rc
   -copy $(SRCDIR)\reginaw32.ico .
   rc /r /foregina$(LARCH)exe.res /i$(SRCDIR)\ .\reginaexe.rc
   cvtres /MACHINE:$(MACH) /NOLOGO /OUT:regina$(LARCH)exe.obj regina$(LARCH)exe.res
#
rexx$(LARCH)exe.obj rexx$(LARCH)exe.res: .\rexxexe.rc
   -copy $(SRCDIR)\reginaw32.ico .
   rc /r /forexx$(LARCH)exe.res /i$(SRCDIR)\ .\rexxexe.rc
   cvtres /MACHINE:$(MACH) /NOLOGO /OUT:rexx$(LARCH)exe.obj rexx$(LARCH)exe.res
#
rxstack$(LARCH)exe.obj rxstack$(LARCH)exe.res: .\rxstackexe.rc
   -copy $(SRCDIR)\reginaw32.ico .
   rc /r /forxstack$(LARCH)exe.res /i$(SRCDIR)\ .\rxstackexe.rc
   cvtres /MACHINE:$(MACH) /NOLOGO /OUT:rxstack$(LARCH)exe.obj rxstack$(LARCH)exe.res
#
rxqueue$(LARCH)exe.obj rxqueue$(LARCH)exe.res: .\rxqueueexe.rc
   -copy $(SRCDIR)\reginaw32.ico .
   rc /r /forxqueue$(LARCH)exe.res /i$(SRCDIR)\ .\rxqueueexe.rc
   cvtres /MACHINE:$(MACH) /NOLOGO /OUT:rxqueue$(LARCH)exe.obj rxqueue$(LARCH)exe.res
#

#
# Rules for manifest files
#
rexx.exe.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ rexx $(VERDOT) $(MMACH) "Rexx Launcher"
regina.exe.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ regina $(VERDOT) $(MMACH) "Regina Launcher"
execiser.exe.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ execiser $(VERDOT) $(MMACH) "Execiser Test"
rxqueue.exe.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ rxqueue $(VERDOT) $(MMACH) "Regina External Queue Interface"
rxstack.exe.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ rxstack $(VERDOT) $(MMACH) "Regina External Queue Manager"
threader.exe.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ threader $(VERDOT) $(MMACH) "Threader Test"
regina.dll.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ regina $(VERDOT) $(MMACH) "Regina Library"
regutil.dll.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ regutil $(VERDOT) $(MMACH) "Regina Utility Library"
rxtest1.dll.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ rxtest1 $(VERDOT) $(MMACH) "Test1 Library"
rxtest2.dll.mf: $(SRCDIR)\makemanifest.rexx
   .\trexx $(SRCDIR)\makemanifest.rexx $@ rxtest2 $(VERDOT) $(MMACH) "Test2 Library"

ARCHIVE_FILES = $(ALLSRC) $(README) $(SRCDIR)/makefile.* \
        $(SRCDIR)/*.rsp $(DEMOFILES) $(TRIPFILES) \
        $(CONFFILES) $(SRCDIR)/*.def $(SRCDIR)/*.ico $(SRCDIR)/*.rc \
        $(SRCDIR)/file_id* $(SRCDIR)/*.bat $(SRCDIR)/*.cmd $(YACCLEX_FILES) \
        $(SRCDIR)/*.rexx $(UNIXFILES)

zip:
        zip regna$(VER) $(ARCHIVE_FILES)

#
# Build NSIS package...
#
exe: all
	copy $(SRCDIR)\nsis\regina_ap.ini .
	copy $(SRCDIR)\nsis\regina_ss.ini .
	copy $(SRCDIR)\nsis\regina_fa.ini .
	copy $(SRCDIR)\nsis\regina_mt.ini .
	rexx $(COMMONSRCDIR)\generatensi.rexx $(SRCDIR)\regina.nsi.in $(SRCDIR)\regina.nsi.files .\regina.nsi
	copy $(SRCDIR)\common\uninstall.ico .
	makensis /DVERSION=$(VERDOT) /DNODOTVER=$(VER) /DVERSUPP=$(VER_SUPP) /DSRCDIR=$(SRCDIR) /DDOCDIR=$(REGINA_DOCDIR) /DARCH=$(LARCH) /DMACH=$(MACH) regina.nsi

binary: all
	-mkdir dist
	cd dist
	-del /F /S *.*
	copy ..\regina.exe
	copy ..\regina.dll
	copy ..\regutil.dll
	copy ..\rexx.exe
	copy ..\rxstack.exe
	copy ..\rxqueue.exe
	copy ..\*.mtb
	copy $(SRCDIR)\COPYING-LIB
	copy $(SRCDIR)\README.$(VER) README$(VER).txt
	copy $(SRCDIR)\README.$(BARCH) README$(BARCH).txt
	-mkdir include
	copy $(SRCDIR)\rexxsaa.h include
	-mkdir lib
	copy ..\regina.lib lib
	copy ..\rexx.lib lib
	-mkdir demo
	copy $(SRCDIR)\demo\*.rexx demo
	copy $(SRCDIR)\regutil\*.rexx demo
	copy ..\rxtest1.dll demo
	copy ..\rxtest2.dll demo
	-mkdir doc
	copy $(REGINA_DOCDIR)\regina.pdf doc
	copy $(REGINA_DOCDIR)\regutil.pdf doc
	-del ..\Regina*$(LARCH).zip
	zip -r ..\Regina$(VER)$(VER_SUPP)$(LARCH) *
	cd ..
#
# Cleanup
#
clean:
	del *.obj *.exe *.dll *.lib *.exp *.res *.mtb gci_convert.h

